///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.20.1.2476 for 8051               09/Apr/2017  15:54:01
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  near
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        H:\TI ble环境搭建\工程\13 μCOS-iii移植2\uC-LIB\lib_math.c
//    Command line       =  
//        "H:\TI ble环境搭建\工程\13 μCOS-iii移植2\uC-LIB\lib_math.c" -lB
//        "H:\TI ble环境搭建\工程\13 μCOS-iii移植2\TI CC2540\APP\IAR
//        Project\Debug\List\" -o "H:\TI ble环境搭建\工程\13 μCOS-iii移植2\TI
//        CC2540\APP\IAR Project\Debug\Obj\" -e --no_cse --no_unroll
//        --no_inline --no_code_motion --no_tbaa --debug --core=plain
//        --dptr=16,1 --data_model=large --code_model=near
//        --calling_convention=xdata_reentrant --place_constants=data
//        --nr_virtual_regs 8 -I "H:\TI ble环境搭建\工程\13
//        μCOS-iii移植2\uCOS-III\Source\" -I "H:\TI ble环境搭建\工程\13
//        μCOS-iii移植2\uCOS-III\Ports\51-CC2540\Generic\IAR\" -I "H:\TI
//        ble环境搭建\工程\13 μCOS-iii移植2\uC-CPU\" -I "H:\TI
//        ble环境搭建\工程\13 μCOS-iii移植2\uC-CPU\51-CC2540\IAR\" -I "H:\TI
//        ble环境搭建\工程\13 μCOS-iii移植2\TI CC2540\BSP\" -I "H:\TI
//        ble环境搭建\工程\13 μCOS-iii移植2\TI CC2540\APP\" -I "H:\TI
//        ble环境搭建\工程\13 μCOS-iii移植2\uC-LIB\" -Ol
//    List file          =  
//        H:\TI ble环境搭建\工程\13 μCOS-iii移植2\TI CC2540\APP\IAR
//        Project\Debug\List\lib_math.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME lib_math

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?UL_DIV_MOD
        EXTERN ?XLOAD_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC Math_Init
        PUBLIC Math_Rand
        PUBLIC Math_RandSeed
        PUBLIC Math_RandSeedCur
        PUBLIC Math_RandSetSeed
        PUBWEAK __Constant_1
        PUBWEAK __Constant_3039
        PUBWEAK __Constant_41c64e6d
        PUBWEAK __Constant_80000000

        EXTERN CPU_SR_Restore
        EXTERN CPU_SR_Save

// H:\TI ble环境搭建\工程\13 μCOS-iii移植2\uC-LIB\lib_math.c
//    1 /*
//    2 *********************************************************************************************************
//    3 *                                                uC/LIB
//    4 *                                        CUSTOM LIBRARY MODULES
//    5 *
//    6 *                          (c) Copyright 2004-2012; Micrium, Inc.; Weston, FL
//    7 *
//    8 *               All rights reserved.  Protected by international copyright laws.
//    9 *
//   10 *               uC/LIB is provided in source form to registered licensees ONLY.  It is 
//   11 *               illegal to distribute this source code to any third party unless you receive 
//   12 *               written permission by an authorized Micrium representative.  Knowledge of 
//   13 *               the source code may NOT be used to develop a similar product.
//   14 *
//   15 *               Please help us continue to provide the Embedded community with the finest 
//   16 *               software available.  Your honesty is greatly appreciated.
//   17 *
//   18 *               You can contact us at www.micrium.com.
//   19 *********************************************************************************************************
//   20 */
//   21 
//   22 /*
//   23 *********************************************************************************************************
//   24 *
//   25 *                                        MATHEMATIC OPERATIONS
//   26 *
//   27 * Filename      : lib_math.c
//   28 * Version       : V1.37.01
//   29 * Programmer(s) : SR
//   30 *                 ITJ
//   31 *********************************************************************************************************
//   32 * Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
//   33 *
//   34 *                     (a) ALL standard library functions are implemented in the custom library modules :
//   35 *
//   36 *                         (1) \<Custom Library Directory>\lib_*.*
//   37 *
//   38 *                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
//   39 *
//   40 *                               where
//   41 *                                       <Custom Library Directory>      directory path for custom library software
//   42 *                                       <cpu>                           directory name for specific processor (CPU)
//   43 *                                       <compiler>                      directory name for specific compiler
//   44 *
//   45 *                     (b) Product-specific library functions are implemented in individual products.
//   46 *
//   47 *********************************************************************************************************
//   48 * Notice(s)     : (1) The Institute of Electrical and Electronics Engineers and The Open Group, have given
//   49 *                     us permission to reprint portions of their documentation.  Portions of this text are
//   50 *                     reprinted and reproduced in electronic form from the IEEE Std 1003.1, 2004 Edition,
//   51 *                     Standard for Information Technology -- Portable Operating System Interface (POSIX),
//   52 *                     The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute
//   53 *                     of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any
//   54 *                     discrepancy between these versions and the original IEEE and The Open Group Standard,
//   55 *                     the original IEEE and The Open Group Standard is the referee document.  The original
//   56 *                     Standard can be obtained online at http://www.opengroup.org/unix/online.html.
//   57 *********************************************************************************************************
//   58 */
//   59 
//   60 
//   61 /*
//   62 *********************************************************************************************************
//   63 *                                            INCLUDE FILES
//   64 *********************************************************************************************************
//   65 */
//   66 
//   67 #define    MICRIUM_SOURCE
//   68 #define    LIB_MATH_MODULE
//   69 #include  <lib_math.h>
//   70 
//   71 
//   72 /*$PAGE*/
//   73 /*
//   74 *********************************************************************************************************
//   75 *                                            LOCAL DEFINES
//   76 *********************************************************************************************************
//   77 */
//   78 
//   79 
//   80 /*
//   81 *********************************************************************************************************
//   82 *                                           LOCAL CONSTANTS
//   83 *********************************************************************************************************
//   84 */
//   85 
//   86 
//   87 /*
//   88 *********************************************************************************************************
//   89 *                                          LOCAL DATA TYPES
//   90 *********************************************************************************************************
//   91 */
//   92 
//   93 
//   94 /*
//   95 *********************************************************************************************************
//   96 *                                            LOCAL TABLES
//   97 *********************************************************************************************************
//   98 */
//   99 
//  100 
//  101 /*
//  102 *********************************************************************************************************
//  103 *                                       LOCAL GLOBAL VARIABLES
//  104 *********************************************************************************************************
//  105 */
//  106 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  107 RAND_NBR  Math_RandSeedCur;                                     /* Cur rand nbr seed.                                   */
Math_RandSeedCur:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  108 
//  109 
//  110 /*
//  111 *********************************************************************************************************
//  112 *                                      LOCAL FUNCTION PROTOTYPES
//  113 *********************************************************************************************************
//  114 */
//  115 
//  116 
//  117 /*
//  118 *********************************************************************************************************
//  119 *                                     LOCAL CONFIGURATION ERRORS
//  120 *********************************************************************************************************
//  121 */
//  122 
//  123 
//  124 /*$PAGE*/
//  125 /*
//  126 *********************************************************************************************************
//  127 *                                             Math_Init()
//  128 *
//  129 * Description : (1) Initialize Mathematic Module :
//  130 *
//  131 *                   (a) Initialize random number seed value
//  132 *
//  133 *
//  134 * Argument(s) : none.
//  135 *
//  136 * Return(s)   : none.
//  137 *
//  138 * Caller(s)   : Application.
//  139 *
//  140 * Note(s)     : (2) IEEE Std 1003.1, 2004 Edition, Section 'rand() : DESCRIPTION' states that "if rand()
//  141 *                   is called before any calls to srand() are made, the same sequence shall be generated
//  142 *                   as when srand() is first called with a seed value of 1".
//  143 *********************************************************************************************************
//  144 */
//  145 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  146 void  Math_Init (void)
Math_Init:
        CODE
//  147 {
        PUSH    DPL
        PUSH    DPH
        ; Saved register size: 2
        ; Auto size: 0
//  148     Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
        ; Setup parameters for call to function Math_RandSetSeed
        MOV     DPTR,#__Constant_1
        LCALL   ?XLOAD_R2345
        LCALL   Math_RandSetSeed
//  149 }
        POP     DPH
        POP     DPL
        RET
//  150 
//  151 
//  152 /*$PAGE*/
//  153 /*
//  154 *********************************************************************************************************
//  155 *                                         Math_RandSetSeed()
//  156 *
//  157 * Description : Set the current pseudo-random number generator seed.
//  158 *
//  159 * Argument(s) : seed        Initial (or current) value to set for the pseudo-random number sequence.
//  160 *
//  161 * Return(s)   : none.
//  162 *
//  163 * Caller(s)   : Application.
//  164 *
//  165 * Note(s)     : (1) IEEE Std 1003.1, 2004 Edition, Section 'rand() : DESCRIPTION' states that "srand() 
//  166 *                   ... uses the argument as a seed for a new sequence of pseudo-random numbers to be 
//  167 *                   returned by subsequent calls to rand()".
//  168 *
//  169 *               (2) 'Math_RandSeedCur' MUST always be accessed exclusively in critical sections.
//  170 *
//  171 *                   See also 'Math_Rand()  Note #1b'.
//  172 *********************************************************************************************************
//  173 */
//  174 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  175 void  Math_RandSetSeed (RAND_NBR  seed)
Math_RandSetSeed:
        CODE
//  176 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
//  177     CPU_SR_ALLOC();
        MOV     R6,#0x0
//  178 
//  179     CPU_CRITICAL_ENTER();
        ; Setup parameters for call to function CPU_SR_Save
        LCALL   CPU_SR_Save
        MOV     A,R1
        MOV     R6,A
//  180     Math_RandSeedCur = seed;
        MOV     DPTR,#Math_RandSeedCur
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  181     CPU_CRITICAL_EXIT();
        ; Setup parameters for call to function CPU_SR_Restore
        MOV     A,R6
        MOV     R1,A
        LCALL   CPU_SR_Restore
//  182 }
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA
//  183 
//  184 
//  185 /*$PAGE*/
//  186 /*
//  187 *********************************************************************************************************
//  188 *                                             Math_Rand()
//  189 *
//  190 * Description : Calculate the next pseudo-random number.
//  191 *
//  192 * Argument(s) : none.
//  193 *
//  194 * Return(s)   : Next pseudo-random number in the sequence after 'Math_RandSeedCur'.
//  195 *
//  196 * Caller(s)   : Application.
//  197 *
//  198 * Note(s)     : (1) (a) The pseudo-random number generator is implemented as a Linear Congruential 
//  199 *                       Generator (LCG).
//  200 *
//  201 *                   (b) The pseudo-random number generated is in the range [0, RAND_LCG_PARAM_M].
//  202 *
//  203 *                   See also 'Math_RandSeed()  Note #1'.
//  204 *
//  205 *               (2) (a) IEEE Std 1003.1, 2004 Edition, Section 'rand() : DESCRIPTION' states that "rand() 
//  206 *                       ... need not be reentrant ... [and] is not required to be thread-safe".
//  207 *
//  208 *                   (b) However, in order to implement Math_Rand() as re-entrant; 'Math_RandSeedCur' MUST 
//  209 *                       always be accessed & updated exclusively in critical sections.
//  210 *
//  211 *                   See also 'Math_RandSeed()  Note #2'.
//  212 *********************************************************************************************************
//  213 */
//  214 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  215 RAND_NBR  Math_Rand (void)
Math_Rand:
        CODE
//  216 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 11
        ; Auto size: 0
//  217     RAND_NBR  seed;
//  218     RAND_NBR  rand_nbr;
//  219     CPU_SR_ALLOC();
        MOV     R6,#0x0
//  220 
//  221 
//  222     CPU_CRITICAL_ENTER();
        ; Setup parameters for call to function CPU_SR_Save
        LCALL   CPU_SR_Save
        MOV     A,R1
        MOV     R6,A
//  223     seed             = Math_RandSeedCur;
        MOV     DPTR,#Math_RandSeedCur
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
//  224     rand_nbr         = Math_RandSeed(seed);
        ; Setup parameters for call to function Math_RandSeed
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
        LCALL   Math_RandSeed
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
//  225     Math_RandSeedCur = rand_nbr;
        MOV     DPTR,#Math_RandSeedCur
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  226     CPU_CRITICAL_EXIT();
        ; Setup parameters for call to function CPU_SR_Restore
        MOV     A,R6
        MOV     R1,A
        LCALL   CPU_SR_Restore
//  227 
//  228     return (rand_nbr);
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA
//  229 }
//  230 
//  231 
//  232 /*$PAGE*/
//  233 /*
//  234 *********************************************************************************************************
//  235 *                                           Math_RandSeed()
//  236 *
//  237 * Description : Calculate the next pseudo-random number.
//  238 *
//  239 * Argument(s) : seed        Initial (or current) value for the pseudo-random number sequence.
//  240 *
//  241 * Return(s)   : Next pseudo-random number in the sequence after 'seed'.
//  242 *
//  243 * Caller(s)   : Math_Rand(),
//  244 *               Application.
//  245 *
//  246 * Note(s)     : (1) (a) BSD/ANSI-C implements rand() as a Linear Congruential Generator (LCG) :
//  247 *
//  248 *                       (A) random_number       =  [(a * random_number ) + b]  modulo m
//  249 *                                        n + 1                        n
//  250 *
//  251 *                               where
//  252 *                                       (1) (a) random_number           Next     random number to generate
//  253 *                                                            n+1
//  254 *                                           (b) random_number           Previous random number    generated
//  255 *                                                            n
//  256 *
//  257 *                                       (2) a = RAND_LCG_PARAM_A        LCG multiplier
//  258 *                                       (3) b = RAND_LCG_PARAM_B        LCG incrementor
//  259 *                                       (4) m = RAND_LCG_PARAM_M + 1    LCG modulus
//  260 *
//  261 *                   (b) The pseudo-random number generated is in the range [0, RAND_LCG_PARAM_M].
//  262 *
//  263                     See also 'lib_math.h  RANDOM NUMBER DEFINES  Note #1b'.
//  264 *
//  265 *               (2) (a) IEEE Std 1003.1, 2004 Edition, Section 'rand() : DESCRIPTION' states that "rand() 
//  266 *                       ... need not be reentrant ... [and] is not required to be thread-safe".
//  267 *
//  268 *                   (b) However, Math_RandSeed() is re-entrant since it calculates the next random number 
//  269 *                       using ONLY local variables.
//  270 *********************************************************************************************************
//  271 */
//  272 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  273 RAND_NBR  Math_RandSeed (RAND_NBR  seed)
Math_RandSeed:
        CODE
//  274 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
//  275     RAND_NBR  rand_nbr;
//  276 
//  277 
//  278     rand_nbr = (((RAND_NBR)RAND_LCG_PARAM_A * seed) + (RAND_NBR)RAND_LCG_PARAM_B)  %  ((RAND_NBR)RAND_LCG_PARAM_M + 1u);
        MOV     DPTR,#__Constant_41c64e6d
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_3039
        MOV     R0,#?V0
        LCALL   ?L_ADD_X
        MOV     DPTR,#__Constant_80000000
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?UL_DIV_MOD
//  279 
//  280     return (rand_nbr);
        MOV     R2,?V4
        MOV     R3,?V5
        MOV     R4,?V6
        MOV     R5,?V7
        MOV     R7,#0x8
        LJMP    ?FUNC_LEAVE_XDATA
//  281 }

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_1:
        DS 4
        REQUIRE `?<Initializer for __Constant_1>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_1>`:
        DATA32
        DD 1

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_41c64e6d:
        DS 4
        REQUIRE `?<Initializer for __Constant_41c64e6d>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_41c64e6d>`:
        DATA32
        DD 1103515245

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_3039:
        DS 4
        REQUIRE `?<Initializer for __Constant_3039>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_3039>`:
        DATA32
        DD 12345

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_80000000:
        DS 4
        REQUIRE `?<Initializer for __Constant_80000000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_80000000>`:
        DATA32
        DD 2147483648

        END
//  282 
// 
// 185 bytes in segment NEAR_CODE
//  16 bytes in segment XDATA_I
//  16 bytes in segment XDATA_ID
//   4 bytes in segment XDATA_Z
// 
// 185 bytes of CODE  memory (+ 16 bytes shared)
//   4 bytes of XDATA memory (+ 16 bytes shared)
//
//Errors: none
//Warnings: none
